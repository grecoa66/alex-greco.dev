generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model accounts {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String?
  access_token      String?
  expires_at        BigInt?
  id_token          String?
  scope             String?
  session_state     String?
  token_type        String?
}

model sessions {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime @db.Timestamptz(6)
  sessionToken String   @db.VarChar(255)
}

model users {
  id            Int       @id @default(autoincrement())
  name          String?   @db.VarChar(255)
  email         String?   @unique @db.VarChar(255)
  emailVerified DateTime? @db.Timestamptz(6)
  image         String?
  role          String?
  props         props[]
  slates        slates[]
  picks         picks[]
}

model verification_token {
  identifier String
  expires    DateTime @db.Timestamptz(6)
  token      String

  @@id([identifier, token])
}

model slates {
  id          Int       @id @default(autoincrement())
  league      String    @db.VarChar(255)
  nfl_week    Int?
  start_date  DateTime  @db.Date
  end_date    DateTime  @db.Date
  is_active   Boolean   @default(false)
  is_locked   Boolean   @default(false)
  is_complete Boolean   @default(false)
  created_by  Int?
  is_public   Boolean   @default(false)
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  modified_at DateTime  @default(now()) @db.Timestamp(6)
  deleted_at  DateTime? @db.Timestamp(6)
  props       props[]
  users       users?    @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  picks       picks[]
}

model props {
  id              Int       @id @default(autoincrement())
  league          String    @db.VarChar(255)
  player_name     String?   @db.VarChar(150)
  players_team    String?   @db.VarChar(150)
  home_team       String    @db.VarChar(150)
  away_team       String    @db.VarChar(150)
  game_start_time DateTime? @db.Timestamp(6)
  start_date      DateTime  @db.Date
  end_date        DateTime  @db.Date
  prop_type       String    @db.VarChar(250)
  under_value     Int
  under_price     Int
  over_value      Int
  over_price      Int
  prop_result     String    @db.VarChar(50)
  created_by      Int
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  modified_at     DateTime  @default(now()) @db.Timestamp(6)
  deleted_at      DateTime? @db.Timestamp(6)
  slate_id        Int
  is_active       Boolean   @default(false)
  users           users     @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  slates          slates    @relation(fields: [slate_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  picks           picks[]
}

model picks {
  id          Int       @id @default(autoincrement())
  selection   String    @db.VarChar(50)
  pick_result String    @db.VarChar(50)
  is_locked   Boolean   @default(false)
  created_by  Int
  prop_id     Int
  slate_id    Int
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  modified_at DateTime  @default(now()) @db.Timestamp(6)
  deleted_at  DateTime? @db.Timestamp(6)
  users       users     @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  props       props     @relation(fields: [prop_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  slates      slates    @relation(fields: [slate_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
